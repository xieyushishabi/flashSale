"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getDevMiddlewares_exports = {};
__export(getDevMiddlewares_exports, {
  getMiddlewares: () => getMiddlewares
});
module.exports = __toCommonJS(getDevMiddlewares_exports);
var import_node_path = require("node:path");
var import_node_url = __toESM(require("node:url"));
var import_shared = require("@rsbuild/shared");
var import_middlewares = require("./middlewares");
const applySetupMiddlewares = (dev, compileMiddlewareAPI) => {
  const setupMiddlewares = dev.setupMiddlewares || [];
  const serverOptions = {
    sockWrite: (type, data) => compileMiddlewareAPI?.sockWrite(type, data)
  };
  const before = [];
  const after = [];
  for (const handler of setupMiddlewares) {
    handler(
      {
        unshift: (...handlers) => before.unshift(...handlers),
        push: (...handlers) => after.push(...handlers)
      },
      serverOptions
    );
  }
  return { before, after };
};
const applyDefaultMiddlewares = async ({
  middlewares,
  server,
  compileMiddlewareAPI,
  output,
  pwd,
  outputFileSystem
}) => {
  const upgradeEvents = [];
  if (server.compress) {
    const { default: compression } = await Promise.resolve().then(() => __toESM(require("../../compiled/http-compression")));
    middlewares.push((req, res, next) => {
      compression({
        gzip: true,
        brotli: false
      })(req, res, next);
    });
  }
  middlewares.push((req, res, next) => {
    res.setHeader("Access-Control-Allow-Origin", "*");
    const path = req.url ? import_node_url.default.parse(req.url).pathname : "";
    if (path?.includes("hot-update")) {
      res.setHeader("Access-Control-Allow-Credentials", "false");
    }
    const confHeaders = server.headers;
    if (confHeaders) {
      for (const [key, value] of Object.entries(confHeaders)) {
        res.setHeader(key, value);
      }
    }
    next();
  });
  if (server.proxy) {
    const { createProxyMiddleware } = await Promise.resolve().then(() => __toESM(require("./proxy")));
    const { middlewares: proxyMiddlewares, upgrade } = createProxyMiddleware(
      server.proxy
    );
    upgradeEvents.push(upgrade);
    for (const middleware of proxyMiddlewares) {
      middlewares.push(middleware);
    }
  }
  const { default: launchEditorMiddleware } = await Promise.resolve().then(() => __toESM(require("../../compiled/launch-editor-middleware")));
  middlewares.push(["/__open-in-editor", launchEditorMiddleware()]);
  if (compileMiddlewareAPI) {
    middlewares.push(compileMiddlewareAPI.middleware);
    upgradeEvents.push(
      compileMiddlewareAPI.onUpgrade.bind(compileMiddlewareAPI)
    );
    middlewares.push((req, res, next) => {
      if (req.url?.endsWith(".hot-update.json")) {
        res.statusCode = 404;
        res.end();
      } else {
        next();
      }
    });
  }
  if (server.publicDir !== false && server.publicDir?.name) {
    const { default: sirv } = await Promise.resolve().then(() => __toESM(require("../../compiled/sirv")));
    const { name } = server.publicDir;
    const publicDir = (0, import_node_path.isAbsolute)(name) ? name : (0, import_node_path.join)(pwd, name);
    const assetMiddleware = sirv(publicDir, {
      etag: true,
      dev: true
    });
    middlewares.push(assetMiddleware);
  }
  const { distPath } = output;
  compileMiddlewareAPI && middlewares.push(
    (0, import_middlewares.getHtmlFallbackMiddleware)({
      distPath: (0, import_node_path.isAbsolute)(distPath) ? distPath : (0, import_node_path.join)(pwd, distPath),
      callback: compileMiddlewareAPI.middleware,
      htmlFallback: server.htmlFallback,
      outputFileSystem
    })
  );
  if (server.historyApiFallback) {
    const { default: connectHistoryApiFallback } = await Promise.resolve().then(() => __toESM(require("../../compiled/connect-history-api-fallback")));
    const historyApiFallbackMiddleware = connectHistoryApiFallback(
      server.historyApiFallback === true ? {} : server.historyApiFallback
    );
    middlewares.push(historyApiFallbackMiddleware);
    compileMiddlewareAPI?.middleware && middlewares.push(compileMiddlewareAPI.middleware);
  }
  middlewares.push(import_middlewares.faviconFallbackMiddleware);
  return {
    onUpgrade: (...args) => {
      for (const cb of upgradeEvents) {
        cb(...args);
      }
    }
  };
};
const getMiddlewares = async (options) => {
  const middlewares = [];
  const { compileMiddlewareAPI } = options;
  if ((0, import_shared.isDebug)()) {
    middlewares.push(await (0, import_middlewares.getRequestLoggerMiddleware)());
  }
  const { before, after } = applySetupMiddlewares(
    options.dev,
    compileMiddlewareAPI
  );
  middlewares.push(...before);
  const { onUpgrade } = await applyDefaultMiddlewares({
    ...options,
    middlewares
  });
  middlewares.push(...after);
  return {
    close: async () => {
      compileMiddlewareAPI?.close();
    },
    onUpgrade,
    middlewares
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getMiddlewares
});
