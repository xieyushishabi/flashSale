import type { OutputStructure, PrintUrls, Routes, RsbuildConfig, RsbuildEntry } from '@rsbuild/shared';
export declare const formatRoutes: (entry: RsbuildEntry, prefix: string | undefined, outputStructure: OutputStructure | undefined) => Routes;
export declare function printServerURLs({ urls: originalUrls, port, routes, protocol, printUrls, }: {
    urls: Array<{
        url: string;
        label: string;
    }>;
    port: number;
    routes: Routes;
    protocol: string;
    printUrls?: PrintUrls;
}): string | undefined;
/**
 * hmr socket connect path
 */
export declare const HMR_SOCK_PATH = "/rsbuild-hmr";
export declare const mergeDevOptions: ({ rsbuildConfig, port, }: {
    rsbuildConfig: RsbuildConfig;
    port: number;
}) => any;
/**
 * Get available free port.
 * @param port - Current port want to use.
 * @param tryLimits - Maximum number of retries.
 * @param strictPort - Whether to throw an error when the port is occupied.
 * @returns Available port number.
 */
export declare const getPort: ({ host, port, strictPort, tryLimits, silent, }: {
    host: string;
    port: string | number;
    strictPort: boolean;
    tryLimits?: number;
    silent?: boolean;
}) => Promise<number>;
export declare const getServerOptions: ({ rsbuildConfig, getPortSilently, }: {
    rsbuildConfig: RsbuildConfig;
    getPortSilently?: boolean;
}) => Promise<{
    port: number;
    host: string;
    https: boolean;
    serverConfig: import("@rsbuild/shared").ServerConfig;
}>;
export declare const getDevOptions: ({ rsbuildConfig, getPortSilently, }: {
    rsbuildConfig: RsbuildConfig;
    getPortSilently?: boolean;
}) => Promise<{
    devConfig: any;
    serverConfig: import("@rsbuild/shared").ServerConfig;
    port: number;
    host: string;
    https: boolean;
    liveReload: any;
}>;
