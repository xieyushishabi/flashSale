"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createContext_exports = {};
__export(createContext_exports, {
  createContext: () => createContext,
  createPublicContext: () => createPublicContext,
  updateContextByNormalizedConfig: () => updateContextByNormalizedConfig
});
module.exports = __toCommonJS(createContext_exports);
var import_node_path = require("node:path");
var import_shared = require("@rsbuild/shared");
var import_config = require("./config");
var import_initHooks = require("./initHooks");
var import_entry = require("./plugins/entry");
function getAbsolutePath(root, filepath) {
  return (0, import_node_path.isAbsolute)(filepath) ? filepath : (0, import_node_path.join)(root, filepath);
}
function getAbsoluteDistPath(cwd, config) {
  const dirRoot = (0, import_shared.getDistPath)(config, "root");
  return getAbsolutePath(cwd, dirRoot);
}
async function createContextByConfig(options, bundlerType, config = {}) {
  const { cwd } = options;
  const rootPath = cwd;
  const distPath = getAbsoluteDistPath(cwd, config);
  const cachePath = (0, import_node_path.join)(rootPath, "node_modules", ".cache");
  const tsconfigPath = config.source?.tsconfigPath;
  const context = {
    entry: (0, import_entry.getEntryObject)(config, "web"),
    targets: config.output?.targets || [],
    version: "0.6.15",
    rootPath,
    distPath,
    cachePath,
    bundlerType,
    tsconfigPath: tsconfigPath ? getAbsolutePath(rootPath, tsconfigPath) : void 0
  };
  return context;
}
function updateContextByNormalizedConfig(context, config) {
  context.targets = config.output.targets;
  context.distPath = getAbsoluteDistPath(context.rootPath, config);
  if (config.source.entry) {
    context.entry = (0, import_entry.getEntryObject)(config, "web");
  }
  if (config.source.tsconfigPath) {
    context.tsconfigPath = getAbsolutePath(
      context.rootPath,
      config.source.tsconfigPath
    );
  }
}
function createPublicContext(context) {
  const exposedKeys = [
    "entry",
    "targets",
    "version",
    "rootPath",
    "distPath",
    "devServer",
    "cachePath",
    "configPath",
    "tsconfigPath",
    "bundlerType"
  ];
  return new Proxy(context, {
    get(target, prop) {
      if (exposedKeys.includes(prop)) {
        return target[prop];
      }
      return void 0;
    },
    set(_, prop) {
      import_shared.logger.error(
        `Context is readonly, you can not assign to the "context.${prop}" prop.`
      );
      return true;
    }
  });
}
async function createContext(options, userRsbuildConfig, bundlerType) {
  const rsbuildConfig = await (0, import_config.withDefaultConfig)(options.cwd, userRsbuildConfig);
  const context = await createContextByConfig(
    options,
    bundlerType,
    rsbuildConfig
  );
  return {
    ...context,
    hooks: (0, import_initHooks.initHooks)(),
    config: { ...rsbuildConfig },
    originalConfig: userRsbuildConfig
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createContext,
  createPublicContext,
  updateContextByNormalizedConfig
});
