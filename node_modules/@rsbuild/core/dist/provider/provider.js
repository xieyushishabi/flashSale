"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var provider_exports = {};
__export(provider_exports, {
  rspackProvider: () => rspackProvider
});
module.exports = __toCommonJS(provider_exports);
var import_shared = require("@rsbuild/shared");
var import_createContext = require("../createContext");
var import_initPlugins = require("../initPlugins");
var import_plugins = require("../plugins");
var import_initConfigs = require("./initConfigs");
const rspackProvider = async ({
  pluginManager,
  rsbuildOptions
}) => {
  const rsbuildConfig = (0, import_shared.pickRsbuildConfig)(rsbuildOptions.rsbuildConfig);
  const context = await (0, import_createContext.createContext)(rsbuildOptions, rsbuildConfig, "rspack");
  const pluginAPI = (0, import_initPlugins.getPluginAPI)({ context, pluginManager });
  context.pluginAPI = pluginAPI;
  const createCompiler = async () => {
    const { createCompiler: createCompiler2 } = await Promise.resolve().then(() => __toESM(require("./createCompiler")));
    const { rspackConfigs } = await (0, import_initConfigs.initConfigs)({
      context,
      pluginManager,
      rsbuildOptions
    });
    return createCompiler2({
      context,
      rspackConfigs
    });
  };
  return {
    bundler: "rspack",
    pluginAPI,
    createCompiler,
    publicContext: (0, import_createContext.createPublicContext)(context),
    async applyDefaultPlugins() {
      const allPlugins = await Promise.all([
        Promise.resolve().then(() => __toESM(require("./plugins/transition"))).then((m) => m.pluginTransition()),
        import_plugins.plugins.basic(),
        import_plugins.plugins.entry(),
        // plugins.cache(),
        import_plugins.plugins.target(),
        Promise.resolve().then(() => __toESM(require("./plugins/output"))).then((m) => m.pluginOutput()),
        Promise.resolve().then(() => __toESM(require("./plugins/resolve"))).then((m) => m.pluginResolve()),
        import_plugins.plugins.fileSize(),
        // cleanOutput plugin should before the html plugin
        import_plugins.plugins.cleanOutput(),
        import_plugins.plugins.asset(),
        import_plugins.plugins.html(async (tags) => {
          const result = await context.hooks.modifyHTMLTags.call(tags);
          return result[0];
        }),
        import_plugins.plugins.wasm(),
        import_plugins.plugins.moment(),
        import_plugins.plugins.nodeAddons(),
        import_plugins.plugins.define(),
        Promise.resolve().then(() => __toESM(require("./plugins/css"))).then((m) => m.pluginCss()),
        Promise.resolve().then(() => __toESM(require("./plugins/less"))).then((m) => m.pluginLess()),
        Promise.resolve().then(() => __toESM(require("./plugins/sass"))).then((m) => m.pluginSass()),
        Promise.resolve().then(() => __toESM(require("./plugins/minimize"))).then((m) => m.pluginMinimize()),
        Promise.resolve().then(() => __toESM(require("./plugins/progress"))).then((m) => m.pluginProgress()),
        Promise.resolve().then(() => __toESM(require("./plugins/swc"))).then((m) => m.pluginSwc()),
        import_plugins.plugins.externals(),
        import_plugins.plugins.splitChunks(),
        import_plugins.plugins.startUrl(),
        import_plugins.plugins.inlineChunk(),
        import_plugins.plugins.bundleAnalyzer(),
        import_plugins.plugins.rsdoctor(),
        import_plugins.plugins.resourceHints(),
        import_plugins.plugins.performance(),
        import_plugins.plugins.server(),
        import_plugins.plugins.moduleFederation(),
        import_plugins.plugins.manifest(),
        Promise.resolve().then(() => __toESM(require("./plugins/rspackProfile"))).then((m) => m.pluginRspackProfile())
      ]);
      pluginManager.addPlugins(allPlugins);
    },
    async createDevServer(options) {
      const { createDevServer } = await Promise.resolve().then(() => __toESM(require("../server/devServer")));
      const { createDevMiddleware } = await Promise.resolve().then(() => __toESM(require("./createCompiler")));
      await (0, import_initConfigs.initRsbuildConfig)({ context, pluginManager });
      return createDevServer(
        { context, pluginManager, rsbuildOptions },
        createDevMiddleware,
        options
      );
    },
    async startDevServer(options) {
      const { createDevServer } = await Promise.resolve().then(() => __toESM(require("../server/devServer")));
      const { createDevMiddleware } = await Promise.resolve().then(() => __toESM(require("./createCompiler")));
      await (0, import_initConfigs.initRsbuildConfig)({ context, pluginManager });
      const server = await createDevServer(
        { context, pluginManager, rsbuildOptions },
        createDevMiddleware,
        options
      );
      return server.listen();
    },
    async preview(options) {
      const { startProdServer } = await Promise.resolve().then(() => __toESM(require("../server/prodServer")));
      await (0, import_initConfigs.initRsbuildConfig)({ context, pluginManager });
      return startProdServer(context, context.config, options);
    },
    async build(options) {
      const { build } = await Promise.resolve().then(() => __toESM(require("./build")));
      return build({ context, pluginManager, rsbuildOptions }, options);
    },
    async initConfigs() {
      const { rspackConfigs } = await (0, import_initConfigs.initConfigs)({
        context,
        pluginManager,
        rsbuildOptions
      });
      return rspackConfigs;
    },
    async inspectConfig(inspectOptions) {
      const { inspectConfig } = await Promise.resolve().then(() => __toESM(require("./inspectConfig")));
      return inspectConfig({
        context,
        pluginManager,
        rsbuildOptions,
        inspectOptions
      });
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rspackProvider
});
