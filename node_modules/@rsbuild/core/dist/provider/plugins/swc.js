"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var swc_exports = {};
__export(swc_exports, {
  applySwcDecoratorConfig: () => applySwcDecoratorConfig,
  getDefaultSwcConfig: () => getDefaultSwcConfig,
  pluginSwc: () => pluginSwc
});
module.exports = __toCommonJS(swc_exports);
var import_node_path = __toESM(require("node:path"));
var import_shared = require("@rsbuild/shared");
var import_constants = require("../../constants");
const builtinSwcLoaderName = "builtin:swc-loader";
async function getDefaultSwcConfig(config, rootPath, target) {
  return {
    jsc: {
      externalHelpers: true,
      parser: {
        tsx: true,
        syntax: "typescript",
        decorators: true
      },
      // Avoid the webpack magic comment to be removed
      // https://github.com/swc-project/swc/issues/6403
      preserveAllComments: true
    },
    isModule: "unknown",
    env: {
      targets: await (0, import_shared.getBrowserslistWithDefault)(rootPath, config, target)
    }
  };
}
const pluginSwc = () => ({
  name: import_constants.PLUGIN_SWC_NAME,
  setup(api) {
    api.modifyBundlerChain({
      order: "pre",
      handler: async (chain, { CHAIN_ID, target }) => {
        const config = api.getNormalizedConfig();
        const rule = chain.module.rule(CHAIN_ID.RULE.JS).test(import_shared.SCRIPT_REGEX).type("javascript/auto");
        (0, import_shared.applyScriptCondition)({
          rule,
          chain,
          config,
          context: api.context,
          includes: [],
          excludes: []
        });
        const swcConfig = await getDefaultSwcConfig(
          config,
          api.context.rootPath,
          target
        );
        applyTransformImport(swcConfig, config.source.transformImport);
        applySwcDecoratorConfig(swcConfig, config);
        if (swcConfig.jsc?.externalHelpers) {
          chain.resolve.alias.set(
            "@swc/helpers",
            import_node_path.default.dirname(require.resolve("@swc/helpers/package.json"))
          );
        }
        if ((0, import_shared.isWebTarget)(target)) {
          const polyfillMode = config.output.polyfill;
          if (polyfillMode === "off") {
            swcConfig.env.mode = void 0;
          } else {
            swcConfig.env.mode = polyfillMode;
            await applyCoreJs(swcConfig, chain, polyfillMode);
          }
        }
        const mergedSwcConfig = (0, import_shared.mergeChainedOptions)({
          defaults: swcConfig,
          options: config.tools.swc,
          mergeFn: import_shared.deepmerge
        });
        rule.use(CHAIN_ID.USE.SWC).loader(builtinSwcLoaderName).options(mergedSwcConfig);
        chain.module.rule(CHAIN_ID.RULE.JS_DATA_URI).mimetype({
          or: ["text/javascript", "application/javascript"]
        }).resolve.set("fullySpecified", false).end().use(CHAIN_ID.USE.SWC).loader(builtinSwcLoaderName).options((0, import_shared.cloneDeep)(mergedSwcConfig));
      }
    });
  }
});
async function applyCoreJs(swcConfig, chain, polyfillMode) {
  const coreJsPath = require.resolve("core-js/package.json");
  const version = (0, import_shared.getCoreJsVersion)(coreJsPath);
  const coreJsDir = import_node_path.default.dirname(coreJsPath);
  swcConfig.env.coreJs = version;
  if (polyfillMode === "usage") {
    swcConfig.env.shippedProposals = true;
  }
  chain.resolve.alias.merge({
    "core-js": coreJsDir
  });
}
function applyTransformImport(swcConfig, pluginImport) {
  var _a;
  if (pluginImport !== false && pluginImport) {
    swcConfig.rspackExperiments ?? (swcConfig.rspackExperiments = {});
    (_a = swcConfig.rspackExperiments).import ?? (_a.import = []);
    swcConfig.rspackExperiments.import.push(...pluginImport);
  }
}
function applySwcDecoratorConfig(swcConfig, config) {
  var _a;
  swcConfig.jsc || (swcConfig.jsc = {});
  (_a = swcConfig.jsc).transform || (_a.transform = {});
  const { version } = config.source.decorators;
  switch (version) {
    case "legacy":
      swcConfig.jsc.transform.legacyDecorator = true;
      swcConfig.jsc.transform.decoratorMetadata = true;
      swcConfig.jsc.transform.useDefineForClassFields = false;
      break;
    case "2022-03":
      swcConfig.jsc.transform.legacyDecorator = false;
      swcConfig.jsc.transform.decoratorVersion = "2022-03";
      break;
    default:
      throw new Error("Unknown decorators version: ${version}");
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  applySwcDecoratorConfig,
  getDefaultSwcConfig,
  pluginSwc
});
