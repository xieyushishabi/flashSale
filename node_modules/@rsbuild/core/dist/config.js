"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var config_exports = {};
__export(config_exports, {
  defineConfig: () => defineConfig,
  loadConfig: () => loadConfig,
  normalizeConfig: () => normalizeConfig,
  watchFiles: () => watchFiles,
  withDefaultConfig: () => withDefaultConfig
});
module.exports = __toCommonJS(config_exports);
var import_node_fs = __toESM(require("node:fs"));
var import_node_path = require("node:path");
var import_shared = require("@rsbuild/shared");
var import_mergeConfig = require("./mergeConfig");
var import_restart = require("./server/restart");
const getDefaultDevConfig = () => ({
  hmr: true,
  liveReload: true,
  assetPrefix: import_shared.DEFAULT_ASSET_PREFIX,
  startUrl: false,
  client: {
    overlay: true
  }
});
const getDefaultServerConfig = () => ({
  port: import_shared.DEFAULT_PORT,
  host: import_shared.DEFAULT_DEV_HOST,
  htmlFallback: "index",
  compress: true,
  printUrls: true,
  strictPort: false,
  publicDir: {
    name: "public",
    copyOnBuild: true,
    watch: false
  }
});
const getDefaultSourceConfig = () => ({
  alias: {},
  define: {},
  aliasStrategy: "prefer-tsconfig",
  preEntry: [],
  decorators: {
    version: "legacy"
  }
});
const getDefaultHtmlConfig = () => ({
  meta: {
    charset: { charset: "UTF-8" },
    viewport: "width=device-width, initial-scale=1.0"
  },
  title: "Rsbuild App",
  inject: "head",
  mountId: import_shared.DEFAULT_MOUNT_ID,
  crossorigin: false,
  outputStructure: "flat",
  scriptLoading: "defer"
});
const getDefaultSecurityConfig = () => ({
  nonce: ""
});
const getDefaultToolsConfig = () => ({
  cssExtract: {
    loaderOptions: {},
    pluginOptions: {}
  }
});
const getDefaultPerformanceConfig = () => ({
  profile: false,
  buildCache: true,
  printFileSize: true,
  removeConsole: false,
  removeMomentLocale: false,
  chunkSplit: {
    strategy: "split-by-experience"
  }
});
const getDefaultOutputConfig = () => ({
  targets: ["web"],
  distPath: {
    root: import_shared.ROOT_DIST_DIR,
    js: import_shared.JS_DIST_DIR,
    css: import_shared.CSS_DIST_DIR,
    svg: import_shared.SVG_DIST_DIR,
    font: import_shared.FONT_DIST_DIR,
    html: import_shared.HTML_DIST_DIR,
    wasm: import_shared.WASM_DIST_DIR,
    image: import_shared.IMAGE_DIST_DIR,
    media: import_shared.MEDIA_DIST_DIR,
    server: import_shared.SERVER_DIST_DIR,
    worker: import_shared.SERVICE_WORKER_DIST_DIR
  },
  assetPrefix: import_shared.DEFAULT_ASSET_PREFIX,
  filename: {},
  charset: "ascii",
  polyfill: "usage",
  dataUriLimit: {
    svg: import_shared.DEFAULT_DATA_URL_SIZE,
    font: import_shared.DEFAULT_DATA_URL_SIZE,
    image: import_shared.DEFAULT_DATA_URL_SIZE,
    media: import_shared.DEFAULT_DATA_URL_SIZE
  },
  legalComments: "linked",
  injectStyles: false,
  minify: true,
  manifest: false,
  sourceMap: {
    js: void 0,
    css: false
  },
  filenameHash: true,
  enableCssModuleTSDeclaration: false,
  inlineScripts: false,
  inlineStyles: false,
  cssModules: {
    auto: true,
    exportLocalsConvention: "camelCase"
  },
  emitAssets: () => true
});
const createDefaultConfig = () => ({
  dev: getDefaultDevConfig(),
  server: getDefaultServerConfig(),
  html: getDefaultHtmlConfig(),
  source: getDefaultSourceConfig(),
  output: getDefaultOutputConfig(),
  tools: getDefaultToolsConfig(),
  security: getDefaultSecurityConfig(),
  performance: getDefaultPerformanceConfig()
});
function getDefaultEntry(root) {
  const files = [
    // Most projects are using typescript now.
    // So we put `.ts` as the first one to improve performance.
    "ts",
    "js",
    "tsx",
    "jsx",
    "mjs",
    "cjs"
  ].map((ext) => (0, import_node_path.join)(root, `src/index.${ext}`));
  const entryFile = (0, import_shared.findExists)(files);
  if (entryFile) {
    return {
      index: entryFile
    };
  }
  return {};
}
const withDefaultConfig = async (rootPath, config) => {
  const merged = (0, import_mergeConfig.mergeRsbuildConfig)(createDefaultConfig(), config);
  merged.source || (merged.source = {});
  if (!merged.source.entry) {
    merged.source.entry = getDefaultEntry(rootPath);
  }
  if (!merged.source.tsconfigPath) {
    const tsconfigPath = (0, import_node_path.join)(rootPath, import_shared.TS_CONFIG_FILE);
    if (await (0, import_shared.isFileExists)(tsconfigPath)) {
      merged.source.tsconfigPath = tsconfigPath;
    }
  }
  return merged;
};
const normalizeConfig = (config) => (0, import_mergeConfig.mergeRsbuildConfig)(createDefaultConfig(), config);
function defineConfig(config) {
  return config;
}
const resolveConfigPath = (root, customConfig) => {
  if (customConfig) {
    const customConfigPath = (0, import_node_path.isAbsolute)(customConfig) ? customConfig : (0, import_node_path.join)(root, customConfig);
    if (import_node_fs.default.existsSync(customConfigPath)) {
      return customConfigPath;
    }
    import_shared.logger.warn(`Cannot find config file: ${import_shared.color.dim(customConfigPath)}
`);
  }
  const CONFIG_FILES = [
    "rsbuild.config.ts",
    "rsbuild.config.js",
    "rsbuild.config.mjs",
    "rsbuild.config.cjs",
    "rsbuild.config.mts",
    "rsbuild.config.cts"
  ];
  for (const file of CONFIG_FILES) {
    const configFile = (0, import_node_path.join)(root, file);
    if (import_node_fs.default.existsSync(configFile)) {
      return configFile;
    }
  }
  return null;
};
async function watchFiles(files) {
  if (!files.length) {
    return;
  }
  const chokidar = await Promise.resolve().then(() => __toESM(require("@rsbuild/shared/chokidar")));
  const watcher = chokidar.watch(files, {
    // do not trigger add for initial files
    ignoreInitial: true,
    // If watching fails due to read permissions, the errors will be suppressed silently.
    ignorePermissionErrors: true
  });
  const callback = (0, import_shared.debounce)(
    async (filePath) => {
      watcher.close();
      await (0, import_restart.restartDevServer)({ filePath });
    },
    // set 300ms debounce to avoid restart frequently
    300
  );
  watcher.on("add", callback);
  watcher.on("change", callback);
  watcher.on("unlink", callback);
}
async function loadConfig({
  cwd = process.cwd(),
  path,
  envMode
} = {}) {
  const configFilePath = resolveConfigPath(cwd, path);
  if (!configFilePath) {
    return {
      content: {},
      filePath: configFilePath
    };
  }
  const applyMetaInfo = (config) => {
    config._privateMeta = { configFilePath };
    return config;
  };
  try {
    const { default: jiti } = await Promise.resolve().then(() => __toESM(require("@rsbuild/shared/jiti")));
    const loadConfig2 = jiti(__filename, {
      esmResolve: true,
      // disable require cache to support restart CLI and read the new config
      requireCache: false,
      interopDefault: true
    });
    const configExport = loadConfig2(configFilePath);
    if (typeof configExport === "function") {
      const command = process.argv[2];
      const params = {
        env: (0, import_shared.getNodeEnv)(),
        command,
        envMode: envMode || (0, import_shared.getNodeEnv)()
      };
      const result = await configExport(params);
      if (result === void 0) {
        throw new Error("Rsbuild config function must return a config object.");
      }
      return {
        content: applyMetaInfo(result),
        filePath: configFilePath
      };
    }
    if (!(0, import_shared.isObject)(configExport)) {
      throw new Error(
        `Rsbuild config must be an object or a function that returns an object, get ${import_shared.color.yellow(
          configExport
        )}`
      );
    }
    return {
      content: applyMetaInfo(configExport),
      filePath: configFilePath
    };
  } catch (err) {
    import_shared.logger.error(`Failed to load file: ${import_shared.color.dim(configFilePath)}`);
    throw err;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  defineConfig,
  loadConfig,
  normalizeConfig,
  watchFiles,
  withDefaultConfig
});
