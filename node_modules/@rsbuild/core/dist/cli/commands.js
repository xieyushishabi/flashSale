"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var commands_exports = {};
__export(commands_exports, {
  runCli: () => runCli
});
module.exports = __toCommonJS(commands_exports);
var import_node_fs = require("node:fs");
var import_node_path = require("node:path");
var import_shared = require("@rsbuild/shared");
var import_commander = require("../../compiled/commander");
var import_init = require("./init");
const applyCommonOptions = (command) => {
  command.option(
    "-c --config <config>",
    "specify the configuration file, can be a relative or absolute path"
  ).option(
    "--env-mode <mode>",
    "specify the env mode to load the `.env.[mode]` file"
  );
};
const applyServerOptions = (command) => {
  command.option("-o --open [url]", "open the page in browser on startup").option("--port <port>", "specify a port number for server to listen").option("--host <host>", "specify the host that the server listens to");
};
function runCli() {
  import_commander.program.name("rsbuild").usage("<command> [options]").version("0.6.15");
  const devCommand = import_commander.program.command("dev");
  const buildCommand = import_commander.program.command("build");
  const previewCommand = import_commander.program.command("preview");
  const inspectCommand = import_commander.program.command("inspect");
  [devCommand, buildCommand, previewCommand, inspectCommand].forEach(
    applyCommonOptions
  );
  [devCommand, previewCommand].forEach(applyServerOptions);
  devCommand.description("starting the dev server").action(async (options) => {
    try {
      const rsbuild = await (0, import_init.init)({ cliOptions: options });
      await rsbuild?.startDevServer();
    } catch (err) {
      import_shared.logger.error("Failed to start dev server.");
      import_shared.logger.error(err);
      process.exit(1);
    }
  });
  buildCommand.option("-w --watch", "turn on watch mode, watch for changes and rebuild").description("build the app for production").action(async (options) => {
    try {
      const rsbuild = await (0, import_init.init)({ cliOptions: options });
      await rsbuild?.build({
        watch: options.watch
      });
    } catch (err) {
      import_shared.logger.error("Failed to build.");
      import_shared.logger.error(err);
      process.exit(1);
    }
  });
  previewCommand.description("preview the production build locally").action(async (options) => {
    try {
      const rsbuild = await (0, import_init.init)({ cliOptions: options });
      if (rsbuild && !(0, import_node_fs.existsSync)(rsbuild.context.distPath)) {
        throw new Error(
          `The output directory ${import_shared.color.yellow(
            rsbuild.context.distPath
          )} does not exist, please build the project before previewing.`
        );
      }
      await rsbuild?.preview();
    } catch (err) {
      import_shared.logger.error("Failed to start preview server.");
      import_shared.logger.error(err);
      process.exit(1);
    }
  });
  inspectCommand.description("inspect the Rspack and Rsbuild configs").option("--env <env>", "specify env mode", "development").option("--output <output>", "specify inspect content output path", "/").option("--verbose", "show full function definitions in output").action(async (options) => {
    try {
      const rsbuild = await (0, import_init.init)({ cliOptions: options });
      await rsbuild?.inspectConfig({
        env: options.env,
        verbose: options.verbose,
        outputPath: (0, import_node_path.join)(rsbuild.context.distPath, options.output),
        writeToDisk: true
      });
    } catch (err) {
      import_shared.logger.error("Failed to inspect config.");
      import_shared.logger.error(err);
      process.exit(1);
    }
  });
  import_commander.program.parse();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  runCli
});
